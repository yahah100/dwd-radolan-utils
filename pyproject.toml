[project]
name = "dwd-radolan-utils"
version = "0.1.0"
description = "Python utilities for downloading and processing DWD RADOLAN radar data"
readme = "README.md"
requires-python = ">=3.13"
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
license = { text = "MIT" }
keywords = ["dwd", "radolan", "weather", "radar", "precipitation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
]

dependencies = [
    "numpy",
    "xarray",
    "pandas",
    "geopandas",
    "shapely",
    "requests",
    "netcdf4",
    "rasterio",
    "wradlib",
    "tqdm",
    "bs4",
    "bz2file",
    "scipy",
    "seaborn",
    "contextily",
    "pytest",
    "pysheds @ git+https://github.com/yahah100/pysheds.git",
]



[project.scripts]
dwd-radolan-download = "dwd_radolan_utils.cli:download_cli"
dwd-radolan-extract = "dwd_radolan_utils.cli:extract_cli"

[project.urls]
Homepage = "https://github.com/yourusername/dwd-radolan-utils"
Repository = "https://github.com/yourusername/dwd-radolan-utils"
Documentation = "https://github.com/yourusername/dwd-radolan-utils#readme"
Issues = "https://github.com/yourusername/dwd-radolan-utils/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatchling.build.targets.wheel]
packages = ["src/dwd_radolan_utils"]

[tool.ruff]
line-length = 140
target-version = "py313"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Allow untyped functions for now
ignore_missing_imports = true  # Ignore missing stubs for external libraries
show_error_codes = true
strict_optional = false
check_untyped_defs = false

# Ignore specific error codes that are not critical
disable_error_code = [
    "import-untyped",
    "no-untyped-def", 
    "annotation-unchecked",
    "assignment",
    "call-overload", 
    "no-any-return"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
addopts = "-v"

[dependency-groups]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.11.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "black>=23.7.0",
    "pre-commit>=3.3.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.3.0",
    "coverage[toml]>=7.0",
    "tox>=4.0.0",
    "types-requests",
    "types-setuptools",
    "pyarrow>=21.0.0",
]
